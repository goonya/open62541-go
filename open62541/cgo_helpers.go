// Mozilla Public License Version 2.0

// WARNING: This file has automatically been generated on Fri, 17 Jan 2020 20:00:08 MSK.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package open62541

/*
#cgo LDFLAGS: -lopen62541
#include "open62541/architecture_base.h"
#include "open62541/architecture_definitions.h"
#include "open62541/architecture_functions.h"
#include "open62541/client_config_default.h"
#include "open62541/client_config.h"
#include "open62541/client.h"
#include "open62541/client_highlevel_async.h"
#include "open62541/client_highlevel.h"
#include "open62541/client_subscriptions.h"
#include "open62541/config.h"
#include "open62541/constants.h"
#include "open62541/ms_stdint.h"
#include "open62541/network_tcp.h"
#include "open62541/nodeids.h"
#include "open62541/server_config_default.h"
#include "open62541/server_config.h"
#include "open62541/server.h"
#include "open62541/server_pubsub.h"
#include "open62541/statuscodes.h"
#include "open62541/types_generated.h"
#include "open62541/types_generated_handling.h"
#include "open62541/types.h"
#include "open62541/util.h"
#include "open62541/ziptree.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"sync"
	"unsafe"
)

// Ref returns a reference to C object as it is.
func (x *Server) Ref() *C.UA_Server {
	if x == nil {
		return nil
	}
	return (*C.UA_Server)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Server) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewServerRef converts the C object reference into a raw struct reference without wrapping.
func NewServerRef(ref unsafe.Pointer) *Server {
	return (*Server)(ref)
}

// NewServer allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewServer() *Server {
	return (*Server)(allocServerMemory(1))
}

// allocServerMemory allocates memory for type C.UA_Server in C.
// The caller is responsible for freeing the this memory via C.free.
func allocServerMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfServerValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfServerValue = unsafe.Sizeof([1]C.UA_Server{})

// cgoAllocMap stores pointers to C allocated memory for future reference.
type cgoAllocMap struct {
	mux sync.RWMutex
	m   map[unsafe.Pointer]struct{}
}

var cgoAllocsUnknown = new(cgoAllocMap)

func (a *cgoAllocMap) Add(ptr unsafe.Pointer) {
	a.mux.Lock()
	if a.m == nil {
		a.m = make(map[unsafe.Pointer]struct{})
	}
	a.m[ptr] = struct{}{}
	a.mux.Unlock()
}

func (a *cgoAllocMap) IsEmpty() bool {
	a.mux.RLock()
	isEmpty := len(a.m) == 0
	a.mux.RUnlock()
	return isEmpty
}

func (a *cgoAllocMap) Borrow(b *cgoAllocMap) {
	if b == nil || b.IsEmpty() {
		return
	}
	b.mux.Lock()
	a.mux.Lock()
	for ptr := range b.m {
		if a.m == nil {
			a.m = make(map[unsafe.Pointer]struct{})
		}
		a.m[ptr] = struct{}{}
		delete(b.m, ptr)
	}
	a.mux.Unlock()
	b.mux.Unlock()
}

func (a *cgoAllocMap) Free() {
	a.mux.Lock()
	for ptr := range a.m {
		C.free(ptr)
		delete(a.m, ptr)
	}
	a.mux.Unlock()
}

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Server) PassRef() *C.UA_Server {
	if x == nil {
		x = (*Server)(allocServerMemory(1))
	}
	return (*C.UA_Server)(unsafe.Pointer(x))
}
