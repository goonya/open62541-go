// Mozilla Public License Version 2.0

// WARNING: This file has automatically been generated on Fri, 17 Jan 2020 22:57:19 MSK.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package open62541

/*
#cgo LDFLAGS: -lopen62541
#include "open62541/architecture_base.h"
#include "open62541/architecture_definitions.h"
#include "open62541/architecture_functions.h"
#include "open62541/client_config_default.h"
#include "open62541/client_config.h"
#include "open62541/client.h"
#include "open62541/client_highlevel_async.h"
#include "open62541/client_highlevel.h"
#include "open62541/client_subscriptions.h"
#include "open62541/config.h"
#include "open62541/constants.h"
#include "open62541/ms_stdint.h"
#include "open62541/network_tcp.h"
#include "open62541/nodeids.h"
#include "open62541/server_config_default.h"
#include "open62541/server_config.h"
#include "open62541/server.h"
#include "open62541/server_pubsub.h"
#include "open62541/statuscodes.h"
#include "open62541/types_generated.h"
#include "open62541/types_generated_handling.h"
#include "open62541/types.h"
#include "open62541/util.h"
#include "open62541/ziptree.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import "unsafe"

// ServerNew function as declared in open62541/server.h:45
func ServerNew() *Server {
	__ret := C.UA_Server_new()
	__v := *(**Server)(unsafe.Pointer(&__ret))
	return __v
}

// ServerNewWithConfig function as declared in open62541/server.h:49
func ServerNewWithConfig(Config *ServerConfig) *Server {
	cConfig, _ := Config.PassRef()
	__ret := C.UA_Server_newWithConfig(cConfig)
	__v := *(**Server)(unsafe.Pointer(&__ret))
	return __v
}

// ServerDelete function as declared in open62541/server.h:52
func ServerDelete(Server *Server) {
	cServer, _ := (*C.UA_Server)(unsafe.Pointer(Server)), cgoAllocsUnknown
	C.UA_Server_delete(cServer)
}

// ServerGetConfig function as declared in open62541/server.h:54
func ServerGetConfig(Server *Server) *ServerConfig {
	cServer, _ := (*C.UA_Server)(unsafe.Pointer(Server)), cgoAllocsUnknown
	__ret := C.UA_Server_getConfig(cServer)
	__v := NewServerConfigRef(unsafe.Pointer(__ret))
	return __v
}

// ServerRun function as declared in open62541/server.h:65
func ServerRun(Server *Server, Running *bool) uint32 {
	cServer, _ := (*C.UA_Server)(unsafe.Pointer(Server)), cgoAllocsUnknown
	cRunning, _ := (*C.UA_Boolean)(unsafe.Pointer(Running)), cgoAllocsUnknown
	__ret := C.UA_Server_run(cServer, cRunning)
	__v := (uint32)(__ret)
	return __v
}

// ServerConfigSetMinimalCustomBuffer function as declared in open62541/server_config_default.h:43
func ServerConfigSetMinimalCustomBuffer(Config *ServerConfig, PortNumber uint16, Certificate *ByteString, SendBufferSize uint32, RecvBufferSize uint32) uint32 {
	cConfig, _ := Config.PassRef()
	cPortNumber, _ := (C.UA_UInt16)(PortNumber), cgoAllocsUnknown
	cCertificate, _ := Certificate.PassRef()
	cSendBufferSize, _ := (C.UA_UInt32)(SendBufferSize), cgoAllocsUnknown
	cRecvBufferSize, _ := (C.UA_UInt32)(RecvBufferSize), cgoAllocsUnknown
	__ret := C.UA_ServerConfig_setMinimalCustomBuffer(cConfig, cPortNumber, cCertificate, cSendBufferSize, cRecvBufferSize)
	__v := (uint32)(__ret)
	return __v
}

// ServerConfigSetMinimal function as declared in open62541/server_config_default.h:55
func ServerConfigSetMinimal(Config *ServerConfig, PortNumber uint16, Certificate *ByteString) uint32 {
	cConfig, _ := Config.PassRef()
	cPortNumber, _ := (C.UA_UInt16)(PortNumber), cgoAllocsUnknown
	cCertificate, _ := Certificate.PassRef()
	__ret := C.UA_ServerConfig_setMinimal(cConfig, cPortNumber, cCertificate)
	__v := (uint32)(__ret)
	return __v
}

// ServerConfigSetDefault function as declared in open62541/server_config_default.h:80
func ServerConfigSetDefault(Config *ServerConfig) uint32 {
	cConfig, _ := Config.PassRef()
	__ret := C.UA_ServerConfig_setDefault(cConfig)
	__v := (uint32)(__ret)
	return __v
}
