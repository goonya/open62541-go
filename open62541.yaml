---
GENERATOR:
  PackageName: open62541
  PackageDescription: "Package open62541 provides Go bindings for https://github.com/open62541/open62541"
  PackageLicense: "Mozilla Public License Version 2.0"
  Includes:
    [
      "open62541/architecture_base.h",
      "open62541/architecture_definitions.h",
      "open62541/architecture_functions.h",
      "open62541/client_config_default.h",
      "open62541/client_config.h",
      "open62541/client.h",
      "open62541/client_highlevel_async.h",
      "open62541/client_highlevel.h",
      "open62541/client_subscriptions.h",
      "open62541/config.h",
      "open62541/constants.h",
      "open62541/ms_stdint.h",
      "open62541/network_tcp.h",
      "open62541/nodeids.h",
      "open62541/server_config_default.h",
      "open62541/server_config.h",
      "open62541/server.h",
      "open62541/server_pubsub.h",
      "open62541/statuscodes.h",
      "open62541/types_generated.h",
      "open62541/types_generated_handling.h",
      "open62541/types.h",
      "open62541/util.h",
      "open62541/ziptree.h",
    ]
  Options:
    SafeStrings: true
    StructAccessors: false
  FlagGroups:
    - { name: LDFLAGS, flags: [-lopen62541] }
PARSER:
  IncludePaths:
    ["/usr/include", "/usr/lib/gcc/x86_64-pc-linux-gnu/9.2.0/include"]
  SourcesPaths:
    [
      "open62541/server.h",
      "open62541/server_config_default.h",
      "open62541/server_config.h",
      "open62541/types_generated.h",
      "open62541/types.h",
    ]
  Defines:
    __builtin_va_start: {}
    __builtin_va_end: {}
TRANSLATOR:
  ConstRules:
    defines: eval
    enum: eval
  MemTips:
    - { target: "^UA_VariableAttributes$", self: bind }
    - { target: "^UA_ObjectAttributes$", self: bind }
    - { target: "^UA_ObjectTypeAttributes$", self: bind }
    - { target: "^UA_WriteValue$", self: bind }
    # Other
    - { target: "^UA_", self: raw }
  PtrTips:
    function:
      - { target: "^UA_Server_newWithConfig$", tips: [ref] }
      - { target: "^UA_Server_delete$", tips: [ref] }
      - { target: "^UA_Server_getConfig$", tips: [ref] }
      - { target: "^UA_Server_run$", tips: [ref, ref] }
      - { target: "^UA_Server_write$", tips: [ref, ref] }
      - { target: "^UA_Server_writeValue$", tips: [ref, size, size] }
      - { target: "^UA_Server_setNodeTypeLifecycle$", tips: [ref, size, size] }
      - {
          target: "^UA_Server_addVariableNode$",
          tips: [ref, size, size, size, size, size, size, ref, ref],
        }
      - {
          target: "^UA_Server_addObjectNode$",
          tips: [ref, size, size, size, size, size, size, ref, ref],
        }
      - {
          target: "^UA_Server_addObjectTypeNode$",
          tips: [ref, size, size, size, size, size, ref, ref],
        }
      - { target: "^UA_String_fromChars$", tips: [size] }
      - { target: "^UA_STRING$", tips: [size] }
      - { target: "^UA_NODEID_NUMERIC$", tips: [size, size] }
      - { target: "^UA_NODEID_STRING$", tips: [size, size] }
      - { target: "^UA_QUALIFIEDNAME$", tips: [size, size] }
      - { target: "^UA_LOCALIZEDTEXT$", tips: [size, size] }
      - { target: "^UA_Variant_init$", tips: [ref] }
      - { target: "^UA_WriteValue_init$", tips: [ref] }
      - { target: "^UA_Variant_setScalar$", tips: [ref, ref, ref] }
      - {
          target: "^UA_ServerConfig_setMinimalCustomBuffer$",
          tips: [ref, size, ref, size, size],
        }
      - { target: "^UA_ServerConfig_setMinimal$", tips: [ref, size, ref] }
      - { target: "^UA_ServerConfig_setDefault$", tips: [ref] }
  Rules:
    global:
      - { action: replace, from: ^UA_ }
    function:
      - { action: accept, from: "^UA_Server_new$" }
      - { action: accept, from: "^UA_Server_newWithConfig$" }
      - { action: accept, from: "^UA_Server_delete$" }
      - { action: accept, from: "^UA_Server_getConfig$" }
      - { action: accept, from: "^UA_Server_run$" }
      - { action: accept, from: "^UA_Server_write$" }
      - { action: accept, from: "^UA_Server_writeValue$" }
      - { action: accept, from: "^UA_Server_setNodeTypeLifecycle$" }
      - { action: accept, from: "^UA_Server_addVariableNode$" }
      - { action: accept, from: "^UA_Server_addObjectNode$" }
      - { action: accept, from: "^UA_Server_addObjectTypeNode$" }
      - { action: accept, from: "^UA_String_fromChars$" }
      - { action: accept, from: "^UA_STRING$" }
      - { action: accept, from: "^UA_NODEID_NUMERIC$" }
      - { action: accept, from: "^UA_NODEID_STRING$" }
      - { action: accept, from: "^UA_QUALIFIEDNAME$" }
      - { action: accept, from: "^UA_LOCALIZEDTEXT$" }
      - { action: accept, from: "^UA_Variant_init$" }
      - { action: accept, from: "^UA_WriteValue_init$" }
      - { action: accept, from: "^UA_Variant_setScalar$" }
      - { action: accept, from: "^UA_ServerConfig_setMinimalCustomBuffer$" }
      - { action: accept, from: "^UA_ServerConfig_setMinimal$" }
      - { action: accept, from: "^UA_ServerConfig_setDefault$" }
    type:
      - { action: accept, from: "^UA_ServerConfig$" }
      - { action: accept, from: "^UA_Server$" }
      - { action: accept, from: "^UA_NodeTypeLifecycle$" }
      # Start Builtin Types
      # - { action: accept, from: "^UA_Boolean$" }
      # - { action: accept, from: "^UA_SByte$" }
      # - { action: accept, from: "^UA_Byte$" }
      # - { action: accept, from: "^UA_Int16$" }
      # - { action: accept, from: "^UA_UInt16$" }
      # - { action: accept, from: "^UA_Int32$" }
      # - { action: accept, from: "^UA_UInt32$" }
      # - { action: accept, from: "^UA_Int64$" }
      # - { action: accept, from: "^UA_UInt64$" }
      # - { action: accept, from: "^UA_Float$" }
      # - { action: accept, from: "^UA_Double$" }
      - { action: accept, from: "^UA_StatusCode$" }
      - { action: accept, from: "^UA_String$" }
      - { action: accept, from: "^UA_DateTime$" }
      - { action: accept, from: "^UA_Guid$" }
      - { action: accept, from: "^UA_ByteString$" }
      - { action: accept, from: "^UA_XmlElement$" }
      - { action: accept, from: "^UA_NodeId$" }
      - { action: accept, from: "^UA_ExpandedNodeId$" }
      - { action: accept, from: "^UA_QualifiedName$" }
      - { action: accept, from: "^UA_LocalizedText$" }
      - { action: accept, from: "^UA_NumericRange$" }
      - { action: accept, from: "^UA_DataType$" }
      - { action: accept, from: "^UA_Variant$" }
      - { action: accept, from: "^UA_DataValue$" }
      - { action: accept, from: "^UA_DiagnosticInfo$" }
      # End Builtin Types
      # - { action: accept, from: "^uint64_t$" }
      # - { action: accept, from: "^int64_t$" }
      - { action: accept, from: "^UA_ObjectAttributes$" }
      - { action: accept, from: "^UA_VariableAttributes$" }
      - { action: accept, from: "^UA_ObjectTypeAttributes$" }
      - { action: accept, from: "^UA_WriteValue$" }
      # Start Enums
      - { action: accept, from: "^UA_AttributeId$" }
      # End Enums
    const:
      - { action: accept, from: "^UA_" }
    private:
      - { transform: unexport }
    post-global:
      - { transform: export }
      - { load: snakecase }